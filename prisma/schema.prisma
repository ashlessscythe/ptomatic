// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  role        Role         @default(USER)
  ptoBalance  Int         @default(0)
  department  Department?  @relation("DepartmentToUsers", fields: [departmentId], references: [id])
  departmentId String?
  manager     User?       @relation("UserToManager", fields: [managerId], references: [id])
  managerId   String?
  managedUsers User[]     @relation("UserToManager")
  ptoRequests PTORequest[]
  createdAt   DateTime    @default(now())
  auditLogs   AuditLog[]
  approvedDepartments Department[] @relation("DepartmentToApprover")
}

model Department {
  id          String    @id @default(uuid())
  name        String
  approver    User?     @relation("DepartmentToApprover", fields: [approverId], references: [id])
  approverId  String?
  users       User[]    @relation("DepartmentToUsers")
  createdAt   DateTime  @default(now())
}

model PTORequest {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  startDate   DateTime
  endDate     DateTime
  status      RequestStatus @default(PENDING)
  notes       String?
  createdAt   DateTime     @default(now())
}

model AuditLog {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  action      String
  timestamp   DateTime  @default(now())
}

enum Role {
  USER
  ADMIN
  MANAGER
  APPROVER
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}
